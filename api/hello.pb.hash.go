// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/hello.proto

package hello

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"hash"
	"hash/fnv"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
	"github.com/mitchellh/hashstructure"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Hash function
func (m *Int64Range) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	hasher.Reset()
	var err error
	// var val uint64

	err = binary.Write(hasher, binary.LittleEndian, m.GetStart())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetEnd())
	if err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *DoubleRange) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	hasher.Reset()
	var err error
	// var val uint64

	err = binary.Write(hasher, binary.LittleEndian, m.GetStart())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetEnd())
	if err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Nested) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	hasher.Reset()
	var err error
	var val uint64

	if h, ok := interface{}(m.GetDoubleRange()).(interface {
		Hash(hasher hash.Hash64) (uint64, error)
	}); ok {
		if val, err = h.Hash(hasher); err != nil {
			return 0, err
		} else {
			err = binary.Write(hasher, binary.LittleEndian, val)
			if err != nil {
				return 0, err
			}
		}
	} else {
		if val, err = hashstructure.Hash(h, nil); err != nil {
			return 0, err
		} else {
			err = binary.Write(hasher, binary.LittleEndian, val)
			if err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}
